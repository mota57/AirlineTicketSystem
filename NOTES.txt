CLIENT APP

The build folder is ready to be deployed.
You may serve it with a static server:

  npm install -g serve
  serve -s build








DONE-----INSTALL AUTOMMATER AND TEST IT
DONE-----INSTALL ENTITY FRAMEWOK
CREATE DB CONTEXT


TODO GATE NAME MUST BE UNIQUE
TODO TERMINAL NAME MUST BE UNIQUE

EF CORE https://www.learnentityframeworkcore.com/raw-sql
https://docs.microsoft.com/en-us/ef/core/saving/disconnected-entities
 public static InsertOrUpdateGraph(AirportDTO airport)
        {
            var existingBlog = _context.Airports
            .Include(b => b.Terminals)
            .FirstOrDefault(b => b.BlogId == blog.BlogId);
            if (existingBlog == null)
            {
                context.Add(blog);
            }
            else
            {
                context.Entry(existingBlog).CurrentValues.SetValues(blog);
                foreach (var post in blog.Posts)
                {
                    var existingPost = existingBlog.Posts
                    .FirstOrDefault(p => p.PostId == post.PostId);
                    if (existingPost == null)
                    {
                        existingBlog.Posts.Add(post);
                    }
                    else
                    {
                        context.Entry(existingPost).CurrentValues.SetValues(post);
                    }
                }
            }
            context.SaveChanges();
        }


        AUTOMAPPER IN THE SERVICE.
        services.AddAutoMapper(options =>
            {
                options.CreateMap<AutorDTO, Autor>().ReverseMap();
                options.CreateMap<AutorCreacionDTO, Autor>().ReverseMap();
            }, typeof(Startup));


            CURSO DE UDEMY
            Master en Frameworks JavaScript: Aprende Angular, React, Vue


             [Column(TypeName = "decimal(18,2)")]
            public decimal Price { get; set; }

            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<Product>()
                .Property(p => p.Price)
                .HasColumnType("decimal(18,2)");



                [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }


   /*ONE TO ONE*/
public class Airline
    {
      
        public int Id { get;set;}
        
        public BagPriceMaster BagPriceMaster { get;set;}
		
	}
	
		public class BagPriceMaster
    {
        public int Id { get;set;}
        public int AirlineId { get;set;}
        public Airline Airline { get;set;}
	}

//force with fluent validation
            modelBuilder.Entity<Airline>()
           .HasOne(b => b.BagPriceMaster)
           .WithOne(i => i.Airline)
           .HasForeignKey<BagPriceMaster>(b => b.AirlineId);


## serilog

If you need to use ILogger (from Serilog) instead of ILogger<HomeController> (from Microsoft.Extensions.Logging), you can register ILogger on your Startup class:

services.AddSingleton(Log.Logger);