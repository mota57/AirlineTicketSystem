 if(record.countryId == null || record.countryId <= 0) {
      setFormErrorObj({ rawerror: true, errors:{'Country': ['Este campo es requerido']}})
      return;
    }



   var errorFields = errorBuilder("Aerolinea", state)
        .isTrue((e) => e.aerlineaId == null || e.aerlineaId <= 0, "Este campo es requerido")
        .isTrue((e) => e.aerlineaId == null || e.aerlineaId <= 0, "Este campo es requerido")


        
 <div className="form-check m-top-1">
            <input
              checked={record.isActive}
              type="checkbox"
              className="form-check-input"
              value={record.isActive || false}
              name="isActive"
              onChange={(e) => changeHandler(e, record.isActive)}
              id="active"
            />
            <label className="form-check-label" htmlFor="#active">
              Activo 
            </label>
          </div>


           <Picklist
              recordid={state.airlineId}
              fieldName="airlineId"
              label="Aerolinea"
              url={`${apiUrls.airline_airport.getAirlinesToSelect}/${state.airportId}`}
              handleOnChange={changeHandler}
              logConsole={true}
            />


 function handleDelete(recordIdToDelete) {
    axios
      .delete(`${ctrlApiUrl}/${recordIdToDelete}`)
      .catch(() => {
        closeModal();
        alert("un error a ocurrido lo sentimos.");
      })
      .then(() => {
        load();
        closeModal();
      });
  }

  function closeModal() {
    changeProperty({ showModalDelete: false, recordId: null });
  }

  function changeProperty(objectUpdate) {
    setSate({ ...state, ...objectUpdate });
  }

                  {/* <ModalDelete
        showModal={state.showModalDelete}
        handleOnClose={() => closeModal()}
        handleOk={() => handleDelete(state.recordId)}
      /> */}